from __future__ import annotations

from typing import TYPE_CHECKING, Any

from ayugespidertools.items import AyuItem
from ayugespidertools.spiders import AyuSpider
from scrapy.http import Request

if TYPE_CHECKING:
    from collections.abc import AsyncIterator

    from scrapy.http.response import Response


class $classname(AyuSpider):
    name = "$name"
    allowed_domains = ["$domain"]
    start_urls = ["$url"]
    custom_settings = {
        "ITEM_PIPELINES": {
            "ayugespidertools.pipelines.AyuAsyncMysqlPipeline": 300,
            "ayugespidertools.pipelines.AyuAsyncMongoPipeline": 301,
            "ayugespidertools.pipelines.AyuAsyncPostgresPipeline": 302,
            "ayugespidertools.pipelines.AyuAsyncOraclePipeline": 303,
        },
    }

    async def start(self) -> AsyncIterator[Any]:
        yield Request(
            url="https://ayugespidertools.readthedocs.io/en/latest/",
            callback=self.parse_first,
            dont_filter=True,
        )

    async def parse_first(self, response: Response) -> Any:
        _save_table = "_octree_info"
        li_list = response.xpath('//div[@aria-label="Navigation menu"]/ul/li')
        for curr_li in li_list:
            octree_text = curr_li.xpath("a/text()").get()
            octree_href = curr_li.xpath("a/@href").get()

            # AyuItem 内置的更新功能文档: https://ayugespidertools.readthedocs.io/en/latest/topics/deduplicate.html
            yield AyuItem(
                octree_text=octree_text,
                octree_href=octree_href,
                _table="demo_eight",
                # 这里的更新新增逻辑会在各自的 pipeline 中生效且互不影响，当然你也可以一同设置 postgresql,
                # oracle 的 pipeline，它们会互不影响且一同生效。
                _update_rule={"octree_text": octree_text},
                _update_keys={"octree_href"},
                # postgresql 存储场景才需要配置此参数。
                _conflict_cols={"octree_href"},
            )
